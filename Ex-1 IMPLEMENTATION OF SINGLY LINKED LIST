#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertAtBeginning(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

void insertAfter(Node* prevNode, int data) {
    if (prevNode == NULL) return;
    Node* newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

void insertAtEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

Node* find(Node* head, int data) {
    Node* current = head;
    while (current != NULL) {
        if (current->data == data) return current;
        current = current->next;
    }
    return NULL;
}

Node* findNext(Node* node) {
    if (node == NULL) return NULL;
    return node->next;
}

Node* findPrevious(Node* head, Node* node) {
    if (head == NULL || head == node) return NULL;
    Node* temp = head;
    while (temp != NULL && temp->next != node) {
        temp = temp->next;
    }
    return temp;
}

int isLast(Node* node) {
    return node != NULL && node->next == NULL;
}

int isEmpty(Node* head) {
    return head == NULL;
}

void deleteAtBeginning(Node** head) {
    if (*head == NULL) return;
    Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

void deleteAfter(Node* prevNode) {
    if (prevNode == NULL || prevNode->next == NULL) return;
    Node* temp = prevNode->next;
    prevNode->next = temp->next;
    free(temp);
}

void deleteAtEnd(Node** head) {
    if (*head == NULL) return;
    if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
        return;
    }
    Node* temp = *head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
}

void deleteList(Node** head) {
    Node* current = *head;
    Node* next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
    *head = NULL;
}

int main() {
    Node* head = NULL;
    
    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 20);
    insertAtEnd(&head, 30);
    insertAfter(head, 25);

    Node* foundNode = find(head, 25);
    if (foundNode != NULL) printf("Found element: %d\n", foundNode->data);
    else printf("Element not found.\n");

    Node* nextNode = findNext(foundNode);
    if (nextNode != NULL) printf("Next element: %d\n", nextNode->data);
    else printf("No next element.\n");

    Node* prevNode = findPrevious(head, foundNode);
    if (prevNode != NULL) printf("Previous element: %d\n", prevNode->data);
    else printf("No previous element or the node is the first node.\n");

    if (isLast(foundNode)) printf("Node %d is the last node.\n", foundNode->data);
    else printf("Node %d is not the last node.\n", foundNode->data);

    if (isEmpty(head)) printf("The list is empty.\n");
    else printf("The list is not empty.\n");

    deleteAtBeginning(&head);
    deleteAfter(head);
    deleteAtEnd(&head);
    deleteList(&head);

    return 0;
}
