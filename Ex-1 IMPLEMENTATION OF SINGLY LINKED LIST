#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void insertAtBeginning(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = head;
    head = newNode;
}

void insertAfter(int data, int after) {
    struct Node* current = head;
    while (current != NULL && current->data != after) {
        current = current->next;
    }
    if (current != NULL) {
        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
        newNode->data = data;
        newNode->next = current->next;
        current->next = newNode;
    }
}

void insertAtEnd(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

struct Node* find(int data) {
    struct Node* current = head;
    while (current != NULL && current->data != data) {
        current = current->next;
    }
    return current;
}

struct Node* findNext(int data) {
    struct Node* current = find(data);
    if (current != NULL) {
        return current->next;
    }
    return NULL;
}

struct Node* findPrevious(int data) {
    if (head == NULL || head->data == data) {
        return NULL;
    }
    struct Node* current = head;
    while (current->next != NULL && current->next->data != data) {
        current = current->next;
    }
    return current->next != NULL ? current : NULL;
}

int isLast(int data) {
    struct Node* current = find(data);
    return current != NULL && current->next == NULL;
}

int isEmpty() {
    return head == NULL;
}

void deleteAtBeginning() {
    if (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
}

void deleteAfter(int after) {
    struct Node* current = find(after);
    if (current != NULL && current->next != NULL) {
        struct Node* temp = current->next;
        current->next = temp->next;
        free(temp);
    }
}

void deleteAtEnd() {
    if (head == NULL) return;
    if (head->next == NULL) {
        free(head);
        head = NULL;
    } else {
        struct Node* current = head;
        while (current->next->next != NULL) {
            current = current->next;
        }
        free(current->next);
        current->next = NULL;
    }
}

void deleteList() {
    struct Node* current = head;
    struct Node* nextNode;
    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    head = NULL;
}

void printList() {
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    int choice, data, after;
    do {
        printf("Menu:\n");
        printf("1. Insert at beginning\n");
        printf("2. Insert after a node\n");
        printf("3. Insert at end\n");
        printf("4. Find element\n");
        printf("5. Find next of an element\n");
        printf("6. Find previous of an element\n");
        printf("7. Check if last\n");
        printf("8. Check if empty\n");
        printf("9. Delete at beginning\n");
        printf("10. Delete after a node\n");
        printf("11. Delete at end\n");
        printf("12. Delete list\n");
        printf("13. Print list\n");
        printf("14. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter data: ");
                scanf("%d", &data);
                insertAtBeginning(data);
                break;
            case 2:
                printf("Enter data to insert and after which data: ");
                scanf("%d %d", &data, &after);
                insertAfter(data, after);
                break;
            case 3:
                printf("Enter data: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 4:
                printf("Enter data to find: ");
                scanf("%d", &data);
                printf("Element %sfound\n", find(data) ? "" : "not ");
                break;
            case 5:
                printf("Enter data to find next: ");
                scanf("%d", &data);
                struct Node* nextNode = findNext(data);
                printf("Next element is %d\n", nextNode ? nextNode->data : -1);
                break;
            case 6:
                printf("Enter data to find previous: ");
                scanf("%d", &data);
                struct Node* prevNode = findPrevious(data);
                printf("Previous element is %d\n", prevNode ? prevNode->data : -1);
                break;
            case 7:
                printf("Enter data to check if last: ");
                scanf("%d", &data);
                printf("%s\n", isLast(data) ? "It is the last element" : "It is not the last element");
                break;
            case 8:
                printf("%s\n", isEmpty() ? "List is empty" : "List is not empty");
                break;
            case 9:
                deleteAtBeginning();
                break;
            case 10:
                printf("Enter data after which to delete: ");
                scanf("%d", &after);
                deleteAfter(after);
                break;
            case 11:
                deleteAtEnd();
                break;
            case 12:
                deleteList();
                break;
            case 13:
                printList();
                break;
            case 14:
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 14);
    return 0;
}
